BROKER SCHEMA esb.primark.oracle

/*
* Filename 	 ORACLE_ESB_TAXCODES_PMF_Compute.esql
* Modulename ORACLE_ESB_TAXCODES_PMF_Compute
* Interfacename PI185 Oracle Tax Codes
* Date	      ProjectName       	Name		   Version			Description
* 21/12/2016  Oracle Financials	Indhu Mathy N		0.1 			Publication of TaxCode Message
* 30/01/2017  Oracle Financials	Indhu Mathy N		0.2				Updated based on the PIAT Service
*/

CREATE COMPUTE MODULE ORACLE_ESB_TAXCODES_PMF_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		 --CALL CopyEntireMessage();
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC.LIST_OF_TAX_CODES;
		IF EXISTS(inRef.TAX_CODE[]) THEN
			DECLARE intaxRef REFERENCE TO inRef.TAX_CODE;
			WHILE LASTMOVE (intaxRef) DO
				CREATE FIELD OutputRoot.XMLNSC.TAX_CODE;
				DECLARE taxcodeRef REFERENCE TO OutputRoot.XMLNSC.TAX_CODE;
				SET taxcodeRef = intaxRef;
				/*Setting the Topic name for publishing the split input message*/
				SET OutputRoot.Properties.Topic = 'ORACLE/MASTERDATA/TAXCODES';
				PROPAGATE TO TERMINAL 'out' DELETE NONE;
				DELETE FIELD OutputRoot.XMLNSC.TAX_CODE;
				MOVE intaxRef NEXTSIBLING REPEAT TYPE NAME;
			END WHILE ;
		END IF;
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE CaptureBusinessData_PMF_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		 SET Environment.Variables.BussinessInfo.MessageId = OutputRoot.MQRFH2.usr.UUID;
		 PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		 SET Environment.Variables.InterfaceId = InterfaceId;
		 PROPAGATE TO TERMINAL 'out' DELETE NONE;
		 RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
